FROM python:3.12-alpine

# Install Litestream and system dependencies
RUN apk add --no-cache gcc musl-dev linux-headers sqlite-libs curl tar \
  && curl -L https://github.com/benbjohnson/litestream/releases/download/v0.3.13/litestream-v0.3.13-linux-amd64.tar.gz | tar -C /usr/local/bin -xzf -

WORKDIR /app

# Copy requirements file
ARG REQUIREMENTS_FILE=requirements.txt
COPY ${REQUIREMENTS_FILE} ./requirements.txt
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY . .

# Litestream setup script
ARG MAIN_FILE=app.py
COPY <<'EOF' /app/setup-litestream.sh
#!/bin/sh
set -e

if [ -n "$SAKURA_OBJECT_STORAGE_BUCKET" ] && \
   [ -n "$SAKURA_OBJECT_STORAGE_ACCESS_KEY" ] && \
   [ -n "$SAKURA_OBJECT_STORAGE_SECRET_KEY" ] && \
   [ -n "$SQLITE_DB_FOLDER" ]; then

  echo "Configuring Litestream backup for folder: $SQLITE_DB_FOLDER"
  mkdir -p "$SQLITE_DB_FOLDER"

  # Create a virtual SQLite database that will trigger Litestream
  LITESTREAM_DB="/tmp/litestream-trigger.db"
  
  cat > /etc/litestream.yml <<LITESTREAM_EOF
dbs:
  - path: $LITESTREAM_DB
    replicas:
      - type: s3
        endpoint: https://s3.isk01.sakurastorage.jp
        bucket: $SAKURA_OBJECT_STORAGE_BUCKET
        path: ${APP_NAME}/db-folder.tar.gz
        access-key-id: $SAKURA_OBJECT_STORAGE_ACCESS_KEY
        secret-access-key: $SAKURA_OBJECT_STORAGE_SECRET_KEY
        sync-interval: ${LITESTREAM_REPLICATE_INTERVAL:-10s}
LITESTREAM_EOF

  # Create backup script that will be called by Litestream hooks
  cat > /app/backup-folder.sh <<BACKUP_EOF
#!/bin/sh
# This script is called by Litestream to backup the folder
cd "$SQLITE_DB_FOLDER"
tar -czf /tmp/db-folder-backup.tar.gz ./*
# Update the trigger database to signal Litestream
sqlite3 "$LITESTREAM_DB" "CREATE TABLE IF NOT EXISTS backup_log (timestamp TEXT); INSERT INTO backup_log VALUES (datetime('now'));"
BACKUP_EOF

  chmod +x /app/backup-folder.sh

  # Create restore script
  cat > /app/restore-folder.sh <<RESTORE_EOF
#!/bin/sh
# This script restores the folder from backup
if [ -f "/tmp/db-folder-backup.tar.gz" ]; then
  echo "Restoring folder from backup..."
  mkdir -p "$SQLITE_DB_FOLDER"
  cd "$SQLITE_DB_FOLDER"
  tar -xzf /tmp/db-folder-backup.tar.gz
  echo "Folder restored successfully"
else
  echo "No backup file found"
fi
RESTORE_EOF

  chmod +x /app/restore-folder.sh

  # Initialize the trigger database
  sqlite3 "$LITESTREAM_DB" "CREATE TABLE IF NOT EXISTS backup_log (timestamp TEXT);"

  # Try to restore from backup
  if [ ! "$(ls -A $SQLITE_DB_FOLDER 2>/dev/null)" ]; then
    echo "Attempting to restore folder from backup..."
    /usr/local/bin/litestream restore -config /etc/litestream.yml -if-replica-exists "$LITESTREAM_DB" || echo "No backup found"
    /app/restore-folder.sh
  fi

  # Start the application with a background folder backup process
  cat > /app/start-with-backup.sh <<START_EOF
#!/bin/sh
# Start Litestream in background
/usr/local/bin/litestream replicate -config /etc/litestream.yml &
LITESTREAM_PID=\$!

# Start periodic folder backup
while true; do
  sleep \${LITESTREAM_REPLICATE_INTERVAL:-10s}
  /app/backup-folder.sh
done &
BACKUP_PID=\$!

# Start the main application
python MAIN_FILE_PLACEHOLDER &
APP_PID=\$!

# Wait for any process to exit
wait \$APP_PID
kill \$LITESTREAM_PID \$BACKUP_PID 2>/dev/null || true
START_EOF

  chmod +x /app/start-with-backup.sh
  echo "Starting with Litestream folder backup..."
  exec /app/start-with-backup.sh
else
  echo "Starting without backup..."
  exec python MAIN_FILE_PLACEHOLDER
fi
EOF

# Replace placeholder with actual main file
RUN sed -i "s/MAIN_FILE_PLACEHOLDER/${MAIN_FILE}/g" /app/setup-litestream.sh

RUN chmod +x /app/setup-litestream.sh

ARG PORT=8080
ENV PORT=$PORT
EXPOSE $PORT

ENTRYPOINT ["/app/setup-litestream.sh"]
