FROM python:3.12-alpine

# Install Litestream and system dependencies
RUN apk add --no-cache gcc musl-dev linux-headers sqlite-libs \
    && curl -L https://github.com/benbjohnson/litestream/releases/download/v0.3.13/litestream-v0.3.13-linux-amd64.tar.gz | tar -C /usr/local/bin -xzf -

WORKDIR /app

# Copy requirements file
ARG REQUIREMENTS_FILE=requirements.txt
COPY ${REQUIREMENTS_FILE} ./requirements.txt
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY . .

# Litestream setup script
ARG MAIN_FILE=app.py
COPY <<'EOF' /app/setup-litestream.sh
#!/bin/sh
set -e

if [ -n "$SAKURA_OBJECT_STORAGE_BUCKET" ] && \
   [ -n "$SAKURA_OBJECT_STORAGE_ACCESS_KEY" ] && \
   [ -n "$SAKURA_OBJECT_STORAGE_SECRET_KEY" ] && \
   [ -n "$SQLITE_DB_PATH" ]; then

  echo "Configuring Litestream backup..."
  mkdir -p "$(dirname "$SQLITE_DB_PATH")"

  cat > /etc/litestream.yml <<LITESTREAM_EOF
dbs:
  - path: $SQLITE_DB_PATH
    replicas:
      - type: s3
        endpoint: https://s3.isk01.sakurastorage.jp
        bucket: $SAKURA_OBJECT_STORAGE_BUCKET
        path: ${APP_NAME}/${SQLITE_DB_PATH##*/}
        access-key-id: $SAKURA_OBJECT_STORAGE_ACCESS_KEY
        secret-access-key: $SAKURA_OBJECT_STORAGE_SECRET_KEY
        sync-interval: ${LITESTREAM_REPLICATE_INTERVAL:-10s}
LITESTREAM_EOF

  if [ ! -f "$SQLITE_DB_PATH" ]; then
    echo "Attempting to restore from backup..."
    /usr/local/bin/litestream restore -config /etc/litestream.yml -if-replica-exists "$SQLITE_DB_PATH" || echo "No backup found"
  fi

  echo "Starting with Litestream backup..."
  exec /usr/local/bin/litestream replicate -config /etc/litestream.yml -exec "python MAIN_FILE_PLACEHOLDER"
else
  echo "Starting without backup..."
  exec python MAIN_FILE_PLACEHOLDER
fi
EOF

# Replace placeholder with actual main file
RUN sed -i "s/MAIN_FILE_PLACEHOLDER/${MAIN_FILE}/g" /app/setup-litestream.sh

RUN chmod +x /app/setup-litestream.sh

ARG PORT=8080
ENV PORT=$PORT
EXPOSE $PORT

ENTRYPOINT ["/app/setup-litestream.sh"]
