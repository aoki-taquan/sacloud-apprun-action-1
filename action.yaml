name: 'Deploy Python to Sakura AppRun'
description: 'Build and deploy Python applications to Sakura AppRun'
author: 'WEI TONG LIN'

inputs:
  sakura-api-key:
    description: 'Sakura Cloud API Key'
    required: true
  sakura-api-secret:
    description: 'Sakura Cloud API Secret'
    required: true
  container-registry:
    description: 'Container registry URL (e.g., myregistry.sakuracr.jp)'
    required: true
  container-registry-user:
    description: 'Container registry username'
    required: true
  container-registry-password:
    description: 'Container registry password'
    required: true
  app-name:
    description: 'Application name (defaults to repository name)'
    required: false
    default: ''
  app-dir:
    description: 'Directory containing Python application (default: root directory)'
    required: false
    default: ''
  port:
    description: 'Application port'
    required: false
    default: '8080'
  max-cpu:
    description: 'Maximum CPU (e.g., "1", "0.5")'
    required: false
    default: '0.4'
  max-memory:
    description: 'Maximum memory (e.g., "512Mi", "1Gi")'
    required: false
    default: '256Mi'
  timeout-seconds:
    description: 'Request timeout in seconds'
    required: false
    default: '300'
  object-storage-bucket:
    description: 'Sakura Object Storage bucket name for SQLite backup (enables Litestream when all S3 credentials are provided)'
    required: false
    default: ''
  object-storage-access-key:
    description: 'Sakura Object Storage access key'
    required: false
    default: ''
  object-storage-secret-key:
    description: 'Sakura Object Storage secret key'
    required: false
    default: ''
  sqlite-db-path:
    description: 'Path to SQLite database file (required when using Litestream backup)'
    required: false
    default: ''
  litestream-replicate-interval:
    description: 'Litestream replication interval (e.g., "1s", "10s")'
    required: false
    default: '10s'
  use-repository-dockerfile:
    description: 'Use repository Dockerfile instead of optimized one'
    required: false
    default: 'true'
  requirements-file:
    description: 'Path to requirements.txt file (relative to app-dir, default: requirements.txt)'
    required: false
    default: 'requirements.txt'
  main-file:
    description: 'Main Python file to run (default: app.py)'
    required: false
    default: 'app.py'

outputs:
  public-url:
    description: 'The public URL of the deployed application'
    value: ${{ steps.deploy.outputs.public-url }}
  app-id:
    description: 'The AppRun application ID'
    value: ${{ steps.deploy.outputs.app-id }}

runs:
  using: 'composite'
  steps:
    - name: Determine Dockerfile to use
      id: dockerfile
      shell: bash
      env:
        ACTION_REF: ${{ github.action_ref || 'main' }}
      run: |
        # If app-dir is set, change to that directory, else stay at root
        if [ -n "${{ inputs.app-dir }}" ]; then
          cd "${{ inputs.app-dir }}"
        fi
        
        REQUIREMENTS_FILE="${{ inputs.requirements-file }}"
        MAIN_FILE="${{ inputs.main-file }}"
        echo "requirements_file=${REQUIREMENTS_FILE}" >> $GITHUB_OUTPUT
        echo "main_file=${MAIN_FILE}" >> $GITHUB_OUTPUT
        
        # Determine if Litestream is needed
        if [ -n "${{ inputs.object-storage-bucket }}" ] && \
           [ -n "${{ inputs.object-storage-access-key }}" ] && \
           [ -n "${{ inputs.object-storage-secret-key }}" ] && \
           [ -n "${{ inputs.sqlite-db-path }}" ]; then
          echo "Litestream backup enabled"
          echo "use_litestream=true" >> $GITHUB_OUTPUT
          DOCKERFILE_URL="https://raw.githubusercontent.com/aoki-taquan/sacloud-apprun-action-1/${ACTION_REF}/Dockerfile.python-litestream"
        else
          echo "Standard deployment (no Litestream)"
          echo "use_litestream=false" >> $GITHUB_OUTPUT
          DOCKERFILE_URL="https://raw.githubusercontent.com/aoki-taquan/sacloud-apprun-action-1/${ACTION_REF}/Dockerfile.python"
        fi

        if [ "${{ inputs.use-repository-dockerfile }}" = "true" ] && [ -f Dockerfile ]; then
          echo "Using repository Dockerfile"
        else
          echo "Downloading Dockerfile from $DOCKERFILE_URL"
          curl -fsSL -o Dockerfile "$DOCKERFILE_URL"
        fi

    - name: Set app name
      id: app-name
      shell: bash
      run: |
        # Change to app-dir if specified
        if [ -n "${{ inputs.app-dir }}" ]; then
          cd "${{ inputs.app-dir }}"
        fi
        APP_NAME="${{ inputs.app-name }}"
        if [ -z "$APP_NAME" ]; then
          APP_NAME="${{ github.event.repository.name }}"
        fi
        echo "name=${APP_NAME}" >> $GITHUB_OUTPUT

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.container-registry }}
        username: ${{ inputs.container-registry-user }}
        password: ${{ inputs.container-registry-password }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ${{ inputs.app-dir || '.' }}
        platforms: linux/amd64
        push: true
        tags: |
          ${{ inputs.container-registry }}/${{ steps.app-name.outputs.name }}:latest
          ${{ inputs.container-registry }}/${{ steps.app-name.outputs.name }}:${{ github.sha }}
        build-args: |
          PORT=${{ inputs.port }}
          REQUIREMENTS_FILE=${{ steps.dockerfile.outputs.requirements_file }}
          MAIN_FILE=${{ steps.dockerfile.outputs.main_file }}
        provenance: false

    - name: Deploy to AppRun
      id: deploy
      shell: bash
      run: |
        AUTH=$(echo -n "${{ inputs.sakura-api-key }}:${{ inputs.sakura-api-secret }}" | base64 | tr -d '\n')

        ENV_VARS="[]"
        if [ -n "${{ inputs.object-storage-bucket }}" ]; then
          ENV_VARS=$(echo "$ENV_VARS" | jq '. + [{"key": "SAKURA_OBJECT_STORAGE_BUCKET", "value": "${{ inputs.object-storage-bucket }}"}]')
        fi
        if [ -n "${{ inputs.object-storage-access-key }}" ]; then
          ENV_VARS=$(echo "$ENV_VARS" | jq '. + [{"key": "SAKURA_OBJECT_STORAGE_ACCESS_KEY", "value": "${{ inputs.object-storage-access-key }}"}]')
        fi
        if [ -n "${{ inputs.object-storage-secret-key }}" ]; then
          ENV_VARS=$(echo "$ENV_VARS" | jq '. + [{"key": "SAKURA_OBJECT_STORAGE_SECRET_KEY", "value": "${{ inputs.object-storage-secret-key }}"}]')
        fi
        if [ -n "${{ inputs.sqlite-db-path }}" ]; then
          ENV_VARS=$(echo "$ENV_VARS" | jq '. + [{"key": "SQLITE_DB_PATH", "value": "${{ inputs.sqlite-db-path }}"}]')
        fi
        if [ -n "${{ inputs.litestream-replicate-interval }}" ]; then
          ENV_VARS=$(echo "$ENV_VARS" | jq '. + [{"key": "LITESTREAM_REPLICATE_INTERVAL", "value": "${{ inputs.litestream-replicate-interval }}"}]')
        fi

        ENV_VARS=$(echo "$ENV_VARS" | jq '. + [{"key": "APP_NAME", "value": "${{ steps.app-name.outputs.name }}"}]')

        REQUEST_BODY=$(jq -n \
          --arg name "${{ steps.app-name.outputs.name }}" \
          --arg timeout "${{ inputs.timeout-seconds }}" \
          --arg port "${{ inputs.port }}" \
          --arg component_name "${{ steps.app-name.outputs.name }}:${{ github.sha }}" \
          --arg max_cpu "${{ inputs.max-cpu }}" \
          --arg max_memory "${{ inputs.max-memory }}" \
          --arg image "${{ inputs.container-registry }}/${{ steps.app-name.outputs.name }}:${{ github.sha }}" \
          --arg server "${{ inputs.container-registry }}" \
          --arg username "${{ inputs.container-registry-user }}" \
          --arg password "${{ inputs.container-registry-password }}" \
          --argjson env_vars "$ENV_VARS" \
          '{
            "name": $name,
            "timeout_seconds": ($timeout | tonumber),
            "port": ($port | tonumber),
            "min_scale": 0,
            "max_scale": 1,
            "components": [
              {
                "name": $component_name,
                "max_cpu": $max_cpu,
                "max_memory": $max_memory,
                "deploy_source": {
                  "container_registry": {
                    "image": $image,
                    "server": $server,
                    "username": $username,
                    "password": $password
                  }
                },
                "env": $env_vars
              }
            ]
          }')

        APP_NAME="${{ steps.app-name.outputs.name }}"
        EXISTING_APPS=$(curl -s -X GET \
          -H "Authorization: Basic ${AUTH}" \
          -H "Content-Type: application/json" \
          https://secure.sakura.ad.jp/cloud/api/apprun/1.0/apprun/api/applications)

        APP_ID=$(echo "$EXISTING_APPS" | jq -r ".data[] | select(.name == \"$APP_NAME\") | .id" || true)

        if [ -n "$APP_ID" ]; then
          echo "Updating existing application: $APP_ID"
          RESPONSE=$(curl -s -X PATCH \
            -H "Authorization: Basic ${AUTH}" \
            -H "Content-Type: application/json" \
            -d "${REQUEST_BODY}" \
            https://secure.sakura.ad.jp/cloud/api/apprun/1.0/apprun/api/applications/${APP_ID})
        else
          echo "Creating new application"
          RESPONSE=$(curl -s -X POST \
            -H "Authorization: Basic ${AUTH}" \
            -H "Content-Type: application/json" \
            -d "${REQUEST_BODY}" \
            https://secure.sakura.ad.jp/cloud/api/apprun/1.0/apprun/api/applications)
        fi

        PUBLIC_URL=$(echo "$RESPONSE" | grep -o '"public_url":"[^"]*' | sed 's/"public_url":"//') || true
        APP_ID=$(echo "$RESPONSE" | grep -o '"id":"[^"]*' | sed 's/"id":"//') || true

        echo "public-url=${PUBLIC_URL}" >> $GITHUB_OUTPUT
        echo "app-id=${APP_ID}" >> $GITHUB_OUTPUT

        if [ -n "$PUBLIC_URL" ]; then
          echo "🚀 Successfully deployed to: $PUBLIC_URL"
        else
          echo "❌ Deployment failed"
          echo "$RESPONSE"
          exit 1
        fi
